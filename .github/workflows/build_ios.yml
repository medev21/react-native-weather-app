name: IOS Production Build

on: [push]

jobs:
  ios-build:
    name: IOS Production Build
    runs-on: macOS-latest
    # defaults:
    #   run:
    #     working-directory: ios

    steps:
        - name: checkout repository
          uses: actions/checkout@v3
  
        - name: Install the Apple certificate and provisioning profile
          env:
            BUILD_CERTIFICATE_BASE64: ${{ secrets.IOS_P12_BASE64 }}
            P12_PASSWORD: ${{ secrets.IOS_CERTIFICATE_PASSWORD }}
            PROVISION_PROFILES_BASE64: ${{ secrets.IOS_MOBILE_PROVISION_BASE64 }}
            KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
          run: |
            # create variables
            CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
            PP_ARCHIVE=$RUNNER_TEMP/mobile_pp.tgz
            KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
  
            # import certificate and provisioning profile from secrets
            echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
            echo -n "$PROVISION_PROFILES_BASE64" | base64 --decode -o $PP_ARCHIVE
  
            # create temporary keychain
            security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
            security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
            security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
  
            # import certificate to keychain
            security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
            security list-keychain -d user -s $KEYCHAIN_PATH
  
            # extract and copy provisioning profile(s)
            mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
            for PROVISION in `ls $RUNNER_TEMP/*.mobileprovision`
            do
              UUID=`/usr/libexec/PlistBuddy -c 'Print :UUID' /dev/stdin <<< $(security cms -D -i $PROVISION)`
              cp $PROVISION ~/Library/MobileDevice/Provisioning\ Profiles/$UUID.mobileprovision
            done
            
            # echo some output
            security find-identity -v -p codesigning
            ls -l ~/Library/MobileDevice/Provisioning\ Profiles          
  
        - uses: actions/setup-node@v3
          with:
            node-version: '18'
            cache: 'yarn'
  
        - name: Enable Corepack
          run: corepack enable
  
        - name: install yarn dependencies
          run:  |
            yarn install          
  
        - name: install Cocoapod dependencies
          run: |
            cd ios
            pod install          
  
        - name: build archive
          run: |
            xcodebuild -workspace ios/WeatherApp.xcworkspace \
            -scheme "WeatherApp" \
            -sdk iphoneos \
            -configuration Debug \
            -destination generic/platform=iOS \
            -archivePath $RUNNER_TEMP/weatherApp.xcarchive \
            archive          
  
        - name: export ipa
          env:
            EXPORT_OPTIONS_PLIST: ${{ secrets.EXPORT_OPTIONS_PLIST }}
          run: |
            EXPORT_OPTS_PATH=$RUNNER_TEMP/ExportOptions.plist
            echo -n "$EXPORT_OPTIONS_PLIST" | base64 --decode -o $EXPORT_OPTS_PATH
            xcodebuild -exportArchive \
            -archivePath $RUNNER_TEMP/WeatherApp.xcarchive \
            -exportOptionsPlist $EXPORT_OPTS_PATH \
            -exportPath $RUNNER_TEMP/build                    
  
        - name: Upload application
          uses: actions/upload-artifact@v3
          with:
            name: app_artifact
            path: ${{ runner.temp }}/build/WeatherApp.ipa
            # you can also archive the entire directory 
            # path: ${{ runner.temp }}/build
            retention-days: 3
        
        - name: Clean up keychain and provisioning profile
          if: ${{ always() }}
          run: |
            security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
            rm ~/Library/MobileDevice/Provisioning\ Profiles/*.mobileprovision
