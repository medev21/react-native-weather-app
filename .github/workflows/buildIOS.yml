name: Build IOS

on:
    workflow_call:
        secrets:
            BUILD_CERTIFICATE_BASE64:
                required: true
            P12_PASSWORD:
                required: true
            PROVISION_PROFILES_BASE64:
                required: true
            KEYCHAIN_PASSWORD:
                required: true
            EXPORT_OPTIONS_PLIST:
                required: true

env:
    ARCHIVE_PATH: ${{ 'build/WeatherApp.xcarchive' }}
    EXPORT_PATH_STAGING: ${{ 'staging/' }}
    ARTIFACT_NAME: ${{ 'app_artifact' }}
    BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
    P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
    PROVISION_PROFILES_BASE64: ${{ secrets.PROVISION_PROFILES_BASE64 }}
    KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
    EXPORT_OPTIONS_PLIST: ${{ secrets.EXPORT_OPTIONS_PLIST }}

jobs:
    ios-build:
        name: IOS Production Build
        runs-on: macOS-latest

        steps:
            - name: checkout repository
              uses: actions/checkout@v3
  
            - name: Install the Apple certificate and provisioning profile
              run: |
                # create variables
                CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
                PP_ARCHIVE=$RUNNER_TEMP/mobile_pp.mobileprovision
                KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
    
                # import certificate and provisioning profile from secrets
                echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
                echo -n "$PROVISION_PROFILES_BASE64" | base64 --decode -o $PP_ARCHIVE
    
                # create temporary keychain
                security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
                security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
                security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
    
                # import certificate to keychain
                security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
                security list-keychain -d user -s $KEYCHAIN_PATH
    
                # extract and copy provisioning profile(s)
                mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
                for PROVISION in `ls $RUNNER_TEMP/*.mobileprovision`
                do
                UUID=`/usr/libexec/PlistBuddy -c 'Print :UUID' /dev/stdin <<< $(security cms -D -i $PROVISION)`
                cp $PROVISION ~/Library/MobileDevice/Provisioning\ Profiles/$UUID.mobileprovision
                done
                
                # echo some output
                security find-identity -v -p codesigning
                ls -l ~/Library/MobileDevice/Provisioning\ Profiles          
  
            - uses: actions/setup-node@v3
              with:
                    node-version: '18'
                    cache: 'yarn'
  
            - name: Enable Corepack
              run: corepack enable
    
            - name: install yarn dependencies
              run:  |
                yarn install --frozen-lockfile --network-timeout 300000

            - name: Restore Pods cache
              uses: actions/cache@v2
              with:
                path: |
                    ios/Pods
                    ~/Library/Caches/CocoaPods
                    ~/.cocoapods
                key: ${{ runner.os }}-pods-${{ hashFiles('ios/Podfile.lock') }}
                restore-keys: |
                    ${{ runner.os }}-pods-

            - name: Install Pods
              run: |
                echo "Current directory: $(pwd)"
                cd ios
                pod install --repo-update
              
            - name: Create build folder
              run: |
                mkdir -p build && mkdir -p staging && mkdir -p prod
                ls
    
            
            - name: Build archive
              run: |
                xcodebuild -workspace ios/WeatherApp.xcworkspace \
                -scheme "WeatherApp" \
                -sdk iphoneos \
                -configuration Debug \
                -destination generic/platform=iOS \
                archive -archivePath $ARCHIVE_PATH
            
            - name: Export ipa
              run: |
                EXPORT_OPTS_PATH=$RUNNER_TEMP/ExportOptions.plist
                echo -n "$EXPORT_OPTIONS_PLIST" | base64 --decode -o $EXPORT_OPTS_PATH
                xcodebuild -exportArchive \
                -archivePath $ARCHIVE_PATH \
                -exportOptionsPlist $EXPORT_OPTS_PATH \
                -exportPath $EXPORT_PATH_STAGING                 
    
            - name: Upload application
              uses: actions/upload-artifact@v3
              with:
                name: ${{ env.ARTIFACT_NAME }}
                path: ${{ env.EXPORT_PATH_STAGING }}
                retention-days: 3
            
            - name: Clean up keychain and provisioning profile
              if: ${{ always() }}
              run: |
                security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
                rm ~/Library/MobileDevice/Provisioning\ Profiles/*.mobileprovision